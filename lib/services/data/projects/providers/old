import 'dart:developer';

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:seren_ai_flutter/services/auth/cur_auth_state_provider.dart';
import 'package:seren_ai_flutter/services/data/orgs/providers/cur_selected_org_id_notifier.dart';
import 'package:seren_ai_flutter/services/data/projects/models/project_model.dart';
import 'package:seren_ai_flutter/services/data/projects/providers/cur_user_viewable_projects_provider.dart';
import 'package:seren_ai_flutter/services/data/projects/repositories/projects_repository.dart';
import 'package:seren_ai_flutter/services/data/users/models/user_model.dart';

final curSelectedProjectStreamProvider = StreamProvider<ProjectModel?>((ref) {
  final projectId = ref.watch(curSelectedProjectIdNotifierProvider);
  if (projectId == null) return Stream.value(null);

  final projectsRepo = ref.read(projectsRepositoryProvider);
  return projectsRepo.watchById(projectId);
});

final curSelectedProjectIdNotifierProvider =
    NotifierProvider<CurSelectedProjectIdNotifier, String?>(() {
  return CurSelectedProjectIdNotifier();
});

class CurSelectedProjectIdNotifier extends Notifier<String?> {
  @override
  String? build() {
    // Only watch the current user
    final curUser = ref.watch(curUserProvider).value;

    if (curUser == null) {
      throw Exception('No user found');
    }

    // Check access only when needed, don't watch continuously
    ref.listen(curUserViewableProjectsProvider, (previous, next) {
      if (next.value != null &&
          state != null &&
          !next.value!.any((e) => e.id == state!)) {
        log('User has no longer access to project ${state!}');
        state = null;
      }
    });

    // Initial setup
    if (state == null) {
      _setToDefaultOrFirstAssignedProject(curUser);
    }

    return state; // state is AsyncLoading ? const AsyncLoading() : state;
  }

  void setProjectId(String projectId) {
    state = projectId;
  }

  Future<void> _setToDefaultOrFirstAssignedProject(UserModel user) async {
    // Defaults to user default project
    if (user.defaultProjectId != null) {
      final defaultProject = await ref
          .read(projectsRepositoryProvider)
          .getById(user.defaultProjectId!);
      if (defaultProject != null) {
        setProjectId(defaultProject.id);
      }
    } else {
      // Defaults to some assigned project when user default project is null
      final orgId = ref.read(curSelectedOrgIdNotifierProvider)!;
      final userProjects = await ref
          .read(projectsRepositoryProvider)
          .getUserProjects(userId: user.id, orgId: orgId);
      if (userProjects.isNotEmpty) {
        setProjectId(userProjects.first.id);
      } else {
        state = null;
      }
    }
  }
}
