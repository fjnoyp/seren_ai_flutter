

/*
class _BaseChatMessageLgWidgetState extends State<BaseChatMessageLgWidget> {
  bool _showDetails = false;

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: EdgeInsets.all(8.0),
      child: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Content:',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            Text(widget.message.content),
            SizedBox(height: 8),
            ElevatedButton(
              onPressed: () {
                setState(() {
                  _showDetails = !_showDetails;
                });
              },
              child: Text(_showDetails ? 'Hide Details' : 'Show Details'),
            ),
            if (_showDetails) ...[
              SizedBox(height: 8),
              Text('Type: ${widget.message.type}'),
              Text('ID: ${widget.message.id}'),
              Text('Name: ${widget.message.name ?? 'empty'}'),
              Text('Tool Call ID: ${widget.message.toolCallId ?? 'empty'}'),
              Text('Artifact: ${widget.message.artifact ?? 'empty'}'),
              Text('Status: ${widget.message.status ?? 'empty'}'),
              Text('Additional Kwargs: ${widget.message.additionalKwargs ?? 'empty'}'),
              Text('Response Metadata:'),
              Text('  Model Name: ${widget.message.responseMetadata?.modelName ?? 'empty'}'),
              Text('  System Fingerprint: ${widget.message.responseMetadata?.systemFingerprint ?? 'empty'}'),
              Text('  Finish Reason: ${widget.message.responseMetadata?.finishReason ?? 'empty'}'),
            ],
          ],
        ),
      ),
    );
  }
}

class AIChatMessageLgWidget extends BaseChatMessageLgWidget {
  const AIChatMessageLgWidget({Key? key, required AIChatMessageLg message})
      : super(key: key, message: message);

  @override
  _AIChatMessageLgWidgetState createState() => _AIChatMessageLgWidgetState();
}

class _AIChatMessageLgWidgetState extends _BaseChatMessageLgWidgetState {
  @override
  Widget build(BuildContext context) {
    final aiMessage = widget.message as AIChatMessageLg;
    return Card(
      margin: EdgeInsets.all(8.0),
      child: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Content:',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            Text(aiMessage.content),
            SizedBox(height: 8),
            Text(
              'Tool Calls:',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            ...(aiMessage.toolCalls ?? []).map((toolCall) => Text(toolCall.toString())),
            SizedBox(height: 8),
            ElevatedButton(
              onPressed: () {
                setState(() {
                  _showDetails = !_showDetails;
                });
              },
              child: Text(_showDetails ? 'Hide Details' : 'Show Details'),
            ),
            if (_showDetails) ...[
              SizedBox(height: 8),
              Text('Type: ${aiMessage.type}'),
              Text('ID: ${aiMessage.id}'),
              Text('Example: ${aiMessage.example}'),
              Text('Invalid Tool Calls: ${aiMessage.invalidToolCalls}'),
              Text('Additional Kwargs: ${aiMessage.additionalKwargs}'),
              Text('Response Metadata:'),
              Text('  Model Name: ${aiMessage.responseMetadata?.modelName ?? 'empty'}'),
              Text('  System Fingerprint: ${aiMessage.responseMetadata?.systemFingerprint ?? 'empty'}'),
              Text('  Finish Reason: ${aiMessage.responseMetadata?.finishReason ?? 'empty'}'),
              Text('Usage Metadata:'),
              Text('  Input Tokens: ${aiMessage.usageMetadata?.inputTokens ?? 'empty'}'),
              Text('  Output Tokens: ${aiMessage.usageMetadata?.outputTokens ?? 'empty'}'),
              Text('  Total Tokens: ${aiMessage.usageMetadata?.totalTokens ?? 'empty'}'),
            ],
          ],
        ),
      ),
    );
  }
}
*/