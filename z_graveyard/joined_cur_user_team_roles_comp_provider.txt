import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:seren_ai_flutter/services/auth/cur_auth_user_provider.dart';
import 'package:seren_ai_flutter/services/data/orgs/cur_org/cur_org_id_provider.dart';
import 'package:seren_ai_flutter/services/data/teams/teams_listener_database_provider.dart';
import 'package:seren_ai_flutter/services/data/users/models/user_model.dart';
import 'package:seren_ai_flutter/services/data/teams/models/joined_team_role_model.dart';
import 'package:seren_ai_flutter/services/data/teams/models/user_team_role_model.dart';
import 'package:seren_ai_flutter/services/data/teams/cur_team/cur_user_team_roles_list_listener_database_provider.dart';

final joinedCurUserTeamRolesCompProvider = StateNotifierProvider<JoinedCurUserTeamRolesCompNotifier, List<JoinedTeamRoleModel>>((ref) {
  return JoinedCurUserTeamRolesCompNotifier(ref);
});

/// Joins the current user's team roles with the teams they belong to
class JoinedCurUserTeamRolesCompNotifier extends StateNotifier<List<JoinedTeamRoleModel>> {
  final Ref ref;

  JoinedCurUserTeamRolesCompNotifier(this.ref) : super([]) {
    _init();
  }

  Future<void> _init() async {
    // Listen to changes in the current user's team roles

// Use watch, listen does not do init state 
    ref.listen<List<UserTeamRoleModel>>(curUserTeamRolesListListenerDatabaseProvider, (previous, next) async {
      final userTeamRoles = next;

      final currentUser = ref.watch(curAuthUserProvider);

      if(next.isEmpty || currentUser == null) {
        state = [];
        return;
      }

      final currentOrgId = ref.watch(curOrgIdProvider);

      if(currentOrgId == null) {
        state = [];
        return;
      }

      // Get the teams associated with the user's roles
      final teamIds = userTeamRoles.map((role) => role.teamId).toList();
      final teams = ref.read(teamsListenerDatabaseProvider(currentOrgId)).where((team) => teamIds.contains(team.id)).toList();

      if(teams.isEmpty) {
        state = [];
        return;
      }

      // Join the team roles with the teams
      final joinedRoles = userTeamRoles.map((role) {
        final team = teams.firstWhere((team) => team.id == role.teamId);
        return JoinedTeamRoleModel(
          teamRole: role,
          team: team, 
          user: currentUser,
        );
      }).toList();

      state = joinedRoles;
    });
    
  }
}
